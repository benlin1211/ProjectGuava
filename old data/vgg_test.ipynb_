{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"vgg_test.ipynb ","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"11ro5BL_Kd38ixcgTpfSNo-vUHGC0-YmG","authorship_tag":"ABX9TyNWQm1445fMWkyGNR/wlGc3"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"3iyXQKiiN7Rt","colab_type":"text"},"source":["# Import"]},{"cell_type":"code","metadata":{"id":"wk1DnpewvRzk","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","\n","from keras.applications.vgg19 import VGG19\n","from keras.applications.vgg19 import preprocess_input\n","from keras.models import Model\n","import cv2, numpy as np\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ADAu3q9jMRoQ","colab_type":"code","outputId":"821e2955-7c51-4b07-d642-aa72f58438db","executionInfo":{"status":"ok","timestamp":1586492394148,"user_tz":-480,"elapsed":4175,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":410}},"source":["!pip install tensorflow==1.14.0\n","%tensorflow_version 1.x\n","import tensorflow"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: tensorflow==1.14.0 in /usr/local/lib/python3.6/dist-packages (1.14.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.27.2)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.12.1)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (0.34.2)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (0.9.0)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (0.8.1)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (0.3.3)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.1.0)\n","Requirement already satisfied: numpy<2.0,>=1.14.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.18.2)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.1.0)\n","Requirement already satisfied: tensorflow-estimator<1.15.0rc0,>=1.14.0rc0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.14.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.12.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (3.10.0)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (0.2.0)\n","Requirement already satisfied: tensorboard<1.15.0,>=1.14.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.14.0)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.14.0) (1.0.8)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.1->tensorflow==1.14.0) (46.1.3)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (1.0.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (3.2.1)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.6->tensorflow==1.14.0) (2.10.0)\n","TensorFlow is already loaded. Please restart the runtime to change versions.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wz9gN--uyrOF","colab_type":"text"},"source":["# VGG19 Structure Overview\n"]},{"cell_type":"code","metadata":{"id":"pEJSTvweuI9f","colab_type":"code","outputId":"2594c8d0-f85d-46f6-e5b2-ac344d7be125","executionInfo":{"status":"ok","timestamp":1586492397553,"user_tz":-480,"elapsed":7566,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["m = VGG19(weights='imagenet')\n","print(m.summary())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"vgg19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_4 (InputLayer)         (None, 224, 224, 3)       0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv4 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv4 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv4 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 1000)              4097000   \n","=================================================================\n","Total params: 143,667,240\n","Trainable params: 143,667,240\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aXrSbVymlP3R","colab_type":"code","outputId":"4bf4c104-14eb-472f-ed6f-fcfcc82f6fab","executionInfo":{"status":"ok","timestamp":1586493027542,"user_tz":-480,"elapsed":1823,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":959}},"source":["# The top layer of the network uis the last passing layer.\n","# include_top = false: remove the classification layer to define yours\n","\n","# base_model = VGG19(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","base_model = VGG19(weights='imagenet', include_top=False, input_shape=(32, 32, 3))\n","print(base_model.summary())\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"vgg19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_10 (InputLayer)        (None, 224, 224, 3)       0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv4 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv4 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv4 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","=================================================================\n","Total params: 20,024,384\n","Trainable params: 20,024,384\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uOHQM8pilKwc","colab_type":"text"},"source":["# Data preprocessing\n"]},{"cell_type":"code","metadata":{"id":"cLMI6vav5rto","colab_type":"code","outputId":"d5db736a-e7e0-424b-86ec-a96d0217b2a4","executionInfo":{"status":"ok","timestamp":1586493055649,"user_tz":-480,"elapsed":732,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["from google.colab import drive\n","mydrive = '/content/drive/'\n","drive.mount(mydrive)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ytvlb57vT4Pb","colab_type":"code","colab":{}},"source":["img_path = mydrive + 'My Drive/Project/dataset2/'\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DZR7QqKqz7Zh","colab_type":"code","colab":{}},"source":["import glob, os\n","from keras.preprocessing.image import img_to_array, load_img\n","\n","# TODO: load image from all subdirectory\n","# convert the image pixels to a numpy array \n","# reshape using load_img\n","# def loading_scaled_data(path):\n","#   imgs = [img_to_array(load_img(file, target_size=(224, 224))) for file \\\n","#       in glob.glob(path)]\n","#   return imgs\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Is0iAeybQgt7","colab_type":"code","colab":{}},"source":["def loading_all_data(path):\n","    imgs = []\n","    level = []\n","    for sub_dict in os.listdir(img_path):\n","        path = img_path + sub_dict + '/*.jpg'\n","        imgs = imgs + [img_to_array(load_img(img, target_size=(224, 224))) \\\n","                       for img in glob.glob(path)]\n","        level = level + [sub_dict for img in glob.glob(path)]\n","    return imgs ,level"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IpBV7_aa4AGU","colab_type":"code","colab":{}},"source":["from keras.datasets import cifar10\n","\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"k2FCw9YrDF22","colab_type":"code","outputId":"e75a9ed0-e19f-4193-be23-fd94069bd011","executionInfo":{"status":"ok","timestamp":1586492401878,"user_tz":-480,"elapsed":11773,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["# X, y = loading_all_data(img_path+\"*.png\" )\n","# print(list(y))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Cf1wIoNmUnlq","colab_type":"code","colab":{}},"source":["# from sklearn.model_selection import train_test_split\n","# x_train, x_test ,y_train , y_test = train_test_split( X, y, test_size=0.33, random_state=42)\n","\n","# 1/3 images for test\n","# 496/3*2 =332 dataset images train "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QPjA1FkHECm3","colab_type":"code","outputId":"577459dd-e5e9-4af3-b512-6cfbb4fb65f5","executionInfo":{"status":"ok","timestamp":1586492401879,"user_tz":-480,"elapsed":11747,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["\"\"\"\n","for img in x_train:\n","    print(img.shape)\n","    plt.imshow(img.astype(np.uint8))\n","    plt.show()\n","    # img = np.expand_dims(img, axis=0)\n","    print(img.shape)\n","\"\"\""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nfor img in x_train:\\n    print(img.shape)\\n    plt.imshow(img.astype(np.uint8))\\n    plt.show()\\n    # img = np.expand_dims(img, axis=0)\\n    print(img.shape)\\n'"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"eV83Y-DwYDdf","colab_type":"code","colab":{}},"source":["# import tensorflow as tf\n","# x_train = np.expand_dims(x_train, axis=0)\n","# x_train = tf.squeeze(x_train)\n","# not affected"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4ilLvDYzWYu9","colab_type":"code","colab":{}},"source":["from keras.utils import to_categorical\n","y_train_hot_encoded = to_categorical(y_train)\n","y_test_hot_encoded = to_categorical(y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"JJzvWO7TZYXp","outputId":"b126bbd5-1471-4a67-ce9d-168429c31cbb","executionInfo":{"status":"ok","timestamp":1586492402179,"user_tz":-480,"elapsed":11909,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["print(np.array(x_train).shape)\n","print(y_train_hot_encoded.shape)\n","\n","print(np.array(x_test).shape)\n","print(y_train_hot_encoded[0])\n","print(y_train_hot_encoded[331])\n","print(np.array(y_train_hot_encoded).shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(332, 224, 224, 3)\n","(332, 7)\n","(164, 224, 224, 3)\n","[0. 0. 0. 0. 0. 0. 1.]\n","[0. 0. 1. 0. 0. 0. 0.]\n","(332, 7)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nwMin0E2D5Gy","colab_type":"text"},"source":["# VGG19 finetune\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ug4lqRJ3rDoe","colab_type":"text"},"source":["Extract/Add certain layer"]},{"cell_type":"code","metadata":{"id":"DbTBW5VVquoe","colab_type":"code","colab":{}},"source":["from keras.layers import Dense, GlobalAveragePooling2D\n","\n","# get layers and add average pooling layer\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","# add fully-connected layer\n","x = Dense(4096, activation='relu', name='fc1')(x)\n","\n","\n","x = Dense(1024, activation='softmax', name='fc2' )(x)\n","# 7 levels\n","predictions = Dense(7, activation='softmax', name='predictions')(x)\n","\n","model = Model(inputs=base_model.input, outputs=predictions)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ckm70lbpt6ua","colab_type":"code","outputId":"76974a6e-cfc9-446a-c352-7773e88158a2","executionInfo":{"status":"ok","timestamp":1586493064054,"user_tz":-480,"elapsed":691,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["print(model.summary())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"model_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_10 (InputLayer)        (None, 224, 224, 3)       0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv4 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv4 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv4 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","global_average_pooling2d_3 ( (None, 512)               0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              2101248   \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 1024)              4195328   \n","_________________________________________________________________\n","predictions (Dense)          (None, 7)                 7175      \n","=================================================================\n","Total params: 26,328,135\n","Trainable params: 26,328,135\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aupwASL54Qiz","colab_type":"text"},"source":["Lock all layer before compiling"]},{"cell_type":"code","metadata":{"id":"kVOgkxsbswcj","colab_type":"code","colab":{}},"source":["# freeze pre-trained model area's layer\n","for layer in base_model.layers:\n","    layer.trainable = False"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gtM3CRCS4W7A","colab_type":"text"},"source":["Compile"]},{"cell_type":"code","metadata":{"id":"ABx_Oulq4Wfx","colab_type":"code","outputId":"bae7b1b9-1280-498e-bdce-2558f57efab5","executionInfo":{"status":"ok","timestamp":1586493068406,"user_tz":-480,"elapsed":713,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["from keras.optimizers import SGD\n","# update the weight that are added\n","sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)\n","model.compile(optimizer=sgd, loss='categorical_crossentropy')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"j82JC3PXX5O7","colab_type":"text"},"source":["# Train"]},{"cell_type":"code","metadata":{"id":"Ck_Bvwh64ieE","colab_type":"code","outputId":"a9315d73-6a6e-460f-ef88-9a49c030516d","executionInfo":{"status":"ok","timestamp":1586230814278,"user_tz":-480,"elapsed":318789,"user":{"displayName":"仲偉林","photoUrl":"","userId":"16443011482508409666"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# model.fit_generator(...)\n","\n","print(np.array(y_train_hot_encoded).shape)\n","print(np.array(y_test).shape)\n","for i in range(5):\n","    hitory = model.fit(np.array(x_train),np.array(y_train_hot_encoded), \\\n","          epochs=10, batch_size = 2^(5+i), \\\n","          validation_data=(np.array(x_test), np.array(y_test_hot_encoded)))\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(332, 7)\n","(164,)\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","Train on 332 samples, validate on 164 samples\n","Epoch 1/10\n","332/332 [==============================] - 321s 966ms/step - loss: 1.8924 - val_loss: 1.9981\n","Epoch 2/10\n","332/332 [==============================] - 320s 964ms/step - loss: 1.8933 - val_loss: 1.9564\n","Epoch 3/10\n","332/332 [==============================] - 320s 962ms/step - loss: 1.8880 - val_loss: 1.9044\n","Epoch 4/10\n","332/332 [==============================] - 320s 963ms/step - loss: 1.9093 - val_loss: 2.0538\n","Epoch 5/10\n","332/332 [==============================] - 320s 963ms/step - loss: 1.8851 - val_loss: 1.9430\n","Epoch 6/10\n","332/332 [==============================] - 320s 964ms/step - loss: 1.9239 - val_loss: 1.9596\n","Epoch 7/10\n","332/332 [==============================] - 320s 963ms/step - loss: 1.9058 - val_loss: 2.0323\n","Epoch 8/10\n","332/332 [==============================] - 320s 965ms/step - loss: 1.8738 - val_loss: 2.1336\n","Epoch 9/10\n","332/332 [==============================] - 320s 964ms/step - loss: 1.8920 - val_loss: 2.1074\n","Epoch 10/10\n","332/332 [==============================] - 320s 964ms/step - loss: 1.8902 - val_loss: 2.0964\n","Train on 332 samples, validate on 164 samples\n","Epoch 1/10\n","332/332 [==============================] - 323s 973ms/step - loss: 1.9361 - val_loss: 2.0205\n","Epoch 2/10\n","332/332 [==============================] - 323s 974ms/step - loss: 1.9255 - val_loss: 1.9857\n","Epoch 3/10\n","332/332 [==============================] - 324s 976ms/step - loss: 1.9390 - val_loss: 2.0966\n","Epoch 4/10\n","332/332 [==============================] - 323s 973ms/step - loss: 1.9296 - val_loss: 1.9675\n","Epoch 5/10\n","332/332 [==============================] - 324s 975ms/step - loss: 1.9326 - val_loss: 2.0957\n","Epoch 6/10\n","332/332 [==============================] - 324s 975ms/step - loss: 1.9580 - val_loss: 1.9160\n","Epoch 7/10\n","332/332 [==============================] - 323s 972ms/step - loss: 1.9456 - val_loss: 2.1755\n","Epoch 8/10\n","332/332 [==============================] - 323s 971ms/step - loss: 1.9725 - val_loss: 1.9550\n","Epoch 9/10\n","332/332 [==============================] - 323s 972ms/step - loss: 1.9175 - val_loss: 2.1761\n","Epoch 10/10\n","332/332 [==============================] - 323s 972ms/step - loss: 1.9356 - val_loss: 2.1075\n","Train on 332 samples, validate on 164 samples\n","Epoch 1/10\n","332/332 [==============================] - 322s 969ms/step - loss: 1.9161 - val_loss: 2.0235\n","Epoch 2/10\n","332/332 [==============================] - 321s 968ms/step - loss: 1.9385 - val_loss: 1.9923\n","Epoch 3/10\n","332/332 [==============================] - 321s 968ms/step - loss: 1.9252 - val_loss: 2.1989\n","Epoch 4/10\n","332/332 [==============================] - 321s 968ms/step - loss: 1.9190 - val_loss: 1.9730\n","Epoch 5/10\n","332/332 [==============================] - 322s 970ms/step - loss: 1.9124 - val_loss: 2.0140\n","Epoch 6/10\n","332/332 [==============================] - 320s 965ms/step - loss: 1.9283 - val_loss: 2.0000\n","Epoch 7/10\n","170/332 [==============>...............] - ETA: 1:45 - loss: 1.8756"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IzOvsIbQsyVk","colab_type":"code","colab":{}},"source":["model.save('/content/drive/My Drive/Project/saved_model/model_test.h5') "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NIhwPKyXQKZ6","colab_type":"code","colab":{}},"source":["\n","plt.plot(hitory.history['acc'])\n","plt.plot(hitory.history['val_acc'])\n","plt.title('Model accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()\n","\n","plt.plot(hitory.history['loss'])\n","plt.plot(hitory.history['val_loss'])\n","plt.title('Model loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vd8yGPxMsSmW","colab_type":"text"},"source":["# Predict"]},{"cell_type":"code","metadata":{"id":"Htv361xqycMH","colab_type":"code","colab":{}},"source":["i = np.expand_dims(imgs[3], axis=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MY2DGba4zARZ","colab_type":"code","colab":{}},"source":["i = preprocess_input(i )\n","res = model.predict(i)\n","print(res.shape)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-EILoge9zB5j","colab_type":"code","colab":{}},"source":["from keras.applications.vgg16 import decode_predictions\n","\n","# print('Predicted:', decode_predictions(res, top=3)[0])\n","\n","# convert the probabilities to class labels\n","label = decode_predictions(res)\n","# retrieve the most likely result, e.g. highest probability\n","label = label[0][0]\n","# print the classification\n","print('%s (%.2f%%)' % (label[1], label[2]*100))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MAvRCvJ8WIb5","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c-6G6v20WKU4","colab_type":"text"},"source":["# ============================================================="]}]}